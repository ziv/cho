(function () {
  window.DENO_DOC_SEARCH_INDEX = {"kind":"search","nodes":[{"id":"namespace_Any","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Any","file":"core/di/mod.ts","doc":"Real any type.","url":"./core/di/mod.ts/~/Any.html","deprecated":false},{"id":"namespace_Ctr","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Ctr","file":"core/di/mod.ts","doc":"Constructor type for classes.","url":"./core/di/mod.ts/~/Ctr.html","deprecated":false},{"id":"namespace_DependsOn","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"DependsOn","file":"core/di/mod.ts","doc":"Mark an injectable as depending on other tokens. This function can be used to specify dependencies that the injectable requires to function properly. It can be used in the context of an injectable descriptor to define its dependencies.","url":"./core/di/mod.ts/~/DependsOn.html","deprecated":false},{"id":"namespace_DescriptorFn","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"DescriptorFn","file":"core/di/mod.ts","doc":"Descriptor function type for modifying descriptors. It takes a partial descriptor and returns a modified partial descriptor. This is used in decorators to build up metadata for injectables and modules.","url":"./core/di/mod.ts/~/DescriptorFn.html","deprecated":false},{"id":"namespace_Factory","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Factory","file":"core/di/mod.ts","doc":"Factory type for creating instances of a dependency from a token.","url":"./core/di/mod.ts/~/Factory.html","deprecated":false},{"id":"namespace_Imports","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Imports","file":"core/di/mod.ts","doc":"Mark a module as importing other modules. This function can be used to specify other modules that the current module depends on. It can be used in the context of a module descriptor to define its imports.","url":"./core/di/mod.ts/~/Imports.html","deprecated":false},{"id":"namespace_Injectable","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Injectable","file":"core/di/mod.ts","doc":"Mark a class as injectable.This decorator allows the class to be used as a dependency in the dependency injection system. It can be used to define dependencies that the class requires to function properly. The dependencies can be specified using the dependsOn function.","url":"./core/di/mod.ts/~/Injectable.html","deprecated":false},{"id":"namespace_InjectableDescriptor","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"InjectableDescriptor","file":"core/di/mod.ts","doc":"Injectable descriptor for defining dependencies of an injectable class. It includes a list of tokens that the injectable depends on.","url":"./core/di/mod.ts/~/InjectableDescriptor.html","deprecated":false},{"id":"namespace_InjectableDescriptor","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"InjectableDescriptor.dependencies","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/InjectableDescriptor.dependencies.html","deprecated":false},{"id":"namespace_InjectableMetadata","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"InjectableMetadata","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/InjectableMetadata.html","deprecated":false},{"id":"namespace_Injector","kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"Injector","file":"core/di/mod.ts","doc":"Dependency Injector This class is responsible for resolving dependencies and managing the lifecycle of instances. It implements the Resolver interface and provides methods to resolve tokens, create instances, and manage providers.","url":"./core/di/mod.ts/~/Injector.html","deprecated":false},{"id":"namespace_Injector","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Injector.prototype.resolve","file":"core/di/mod.ts","doc":"Resolve a token to its corresponding instance.","url":"./core/di/mod.ts/~/Injector.prototype.resolve.html","deprecated":false},{"id":"namespace_Injector","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Injector.prototype.provider","file":"core/di/mod.ts","doc":"Get a provider by its token.","url":"./core/di/mod.ts/~/Injector.prototype.provider.html","deprecated":false},{"id":"namespace_Injector","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Injector.prototype.create","file":"core/di/mod.ts","doc":"Create an instance of a class with its dependencies resolved.","url":"./core/di/mod.ts/~/Injector.prototype.create.html","deprecated":false},{"id":"namespace_Injector","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Injector.prototype.name","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Injector.prototype.name.html","deprecated":false},{"id":"namespace_Injector","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Injector.prototype.desc","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Injector.prototype.desc.html","deprecated":false},{"id":"namespace_InjectorMetadata","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"InjectorMetadata","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/InjectorMetadata.html","deprecated":false},{"id":"namespace_Instance","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Instance","file":"core/di/mod.ts","doc":"Instance type for objects. This is a utility type that represents an instance of a given object type.","url":"./core/di/mod.ts/~/Instance.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"MethodContext","file":"core/di/mod.ts","doc":"Class decorator context (decorators stage 3, TC39) This is used in class decorators to provide metadata and utilities.","url":"./core/di/mod.ts/~/MethodContext.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.kind","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.kind.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.name","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.name.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.static","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.static.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.private","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.private.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.metadata","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.metadata.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.addInitializer","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.addInitializer.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.access","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.access.html","deprecated":false},{"id":"namespace_MethodContext","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MethodContext.access.get","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/MethodContext.access.get.html","deprecated":false},{"id":"namespace_Module","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Module","file":"core/di/mod.ts","doc":"Mark a class as a module.This decorator allows the class to be used as a module in the dependency injection system. It can be used to define providers and imports that the module requires. The providers can be specified using the provide function, and imports can be specified using the imports function.","url":"./core/di/mod.ts/~/Module.html","deprecated":false},{"id":"namespace_ModuleDescriptor","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"ModuleDescriptor","file":"core/di/mod.ts","doc":"Module descriptor for defining imports and providers of a module. It extends the InjectableDescriptor to include dependencies. It includes a list of imported modules and a list of providers defined in the module.","url":"./core/di/mod.ts/~/ModuleDescriptor.html","deprecated":false},{"id":"namespace_ModuleMetadata","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"ModuleMetadata","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/ModuleMetadata.html","deprecated":false},{"id":"namespace_Provide","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Provide","file":"core/di/mod.ts","doc":"Create a provider for a token. This function can be used to provide a value using a factory function or a class as a dependency. Should be run in creating module context only (Module Decorator).","url":"./core/di/mod.ts/~/Provide.html","deprecated":false},{"id":"namespace_Provider","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Provider","file":"core/di/mod.ts","doc":"Provider type for defining how to provide a dependency. It includes a token to identify the dependency and a factory function to create the instance. The factory function receives a Resolver to resolve any dependencies needed to create the instance.","url":"./core/di/mod.ts/~/Provider.html","deprecated":false},{"id":"namespace_Provider","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Provider.provide","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Provider.provide.html","deprecated":false},{"id":"namespace_Provider","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Provider.factory","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Provider.factory.html","deprecated":false},{"id":"namespace_Resolved","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Resolved","file":"core/di/mod.ts","doc":"Cached resolved value with reference count. This is used internally by the Injector to manage instances and their lifetimes.","url":"./core/di/mod.ts/~/Resolved.html","deprecated":false},{"id":"namespace_Resolved","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Resolved.value","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Resolved.value.html","deprecated":false},{"id":"namespace_Resolved","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Resolved.refCount","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Resolved.refCount.html","deprecated":false},{"id":"namespace_Resolver","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Resolver","file":"core/di/mod.ts","doc":"Resolver interface for resolving dependencies. It defines a method to resolve a token to its value. Implemented by the Injector class.","url":"./core/di/mod.ts/~/Resolver.html","deprecated":false},{"id":"namespace_Resolver","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Resolver.resolve","file":"core/di/mod.ts","doc":"","url":"./core/di/mod.ts/~/Resolver.resolve.html","deprecated":false},{"id":"namespace_Target","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Target","file":"core/di/mod.ts","doc":"Real Function type.","url":"./core/di/mod.ts/~/Target.html","deprecated":false},{"id":"namespace_Token","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Token","file":"core/di/mod.ts","doc":"Token type for dependency injection. It can be a string, symbol, or a class constructor.","url":"./core/di/mod.ts/~/Token.html","deprecated":false},{"id":"namespace_collect","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"collect","file":"core/di/mod.ts","doc":"Collect and merge multiple descriptor functions into a single descriptor object. Each function is applied in sequence, allowing for modular and reusable descriptor definitions.","url":"./core/di/mod.ts/~/collect.html","deprecated":false},{"id":"namespace_getInjectable","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getInjectable","file":"core/di/mod.ts","doc":"Read injectable metadata from a target if present.","url":"./core/di/mod.ts/~/getInjectable.html","deprecated":false},{"id":"namespace_getInjector","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getInjector","file":"core/di/mod.ts","doc":"Read the injector instance associated with a target if present.","url":"./core/di/mod.ts/~/getInjector.html","deprecated":false},{"id":"namespace_getModule","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getModule","file":"core/di/mod.ts","doc":"Read module metadata from a target if present.","url":"./core/di/mod.ts/~/getModule.html","deprecated":false},{"id":"namespace_read","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"read","file":"core/di/mod.ts","doc":"Safely read a property from a target using a symbol key. Returns undefined if the property does not exist.","url":"./core/di/mod.ts/~/read.html","deprecated":false},{"id":"namespace_setInjectable","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"setInjectable","file":"core/di/mod.ts","doc":"Define injectable metadata on a target using a symbol-keyed property. Defaults to an empty dependency list when not provided.","url":"./core/di/mod.ts/~/setInjectable.html","deprecated":false},{"id":"namespace_setInjector","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"setInjector","file":"core/di/mod.ts","doc":"Attach an Injector instance to a target (class/function/object) using a symbol-keyed property.","url":"./core/di/mod.ts/~/setInjector.html","deprecated":false},{"id":"namespace_setModule","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"setModule","file":"core/di/mod.ts","doc":"Define module metadata on a target using a symbol-keyed property. Empty arrays are applied by default for imports and providers when omitted.","url":"./core/di/mod.ts/~/setModule.html","deprecated":false},{"id":"namespace_write","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"write","file":"core/di/mod.ts","doc":"Safely write a property to a target using a symbol key. Throws an error if the property already exists to prevent accidental overwrites.","url":"./core/di/mod.ts/~/write.html","deprecated":false},{"id":"namespace_debuglog","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"debuglog","file":"core/utils/mod.ts","doc":"Debug log function factory.Returns a logging function that prefixes messages with a timestamp and context. The logging function has an error method for error messages.The logging is enabled if the CHO_DEBUGLOG environment variable includes the context string.","url":"./core/utils/mod.ts/~/debuglog.html","category":"@chojs/core/utils","deprecated":false},{"id":"namespace_env","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"env","file":"core/utils/mod.ts","doc":"Get environment variable with support for Deno, Bun, and Node.js.","url":"./core/utils/mod.ts/~/env.html","category":"@chojs/core/utils","deprecated":false},{"id":"namespace_envbool","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"envbool","file":"core/utils/mod.ts","doc":"Get environment variable as boolean. Recognizes \"1\", \"true\", \"yes\", \"on\" (case-insensitive) as true.","url":"./core/utils/mod.ts/~/envbool.html","category":"@chojs/core/utils","deprecated":false},{"id":"namespace_envnum","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"envnum","file":"core/utils/mod.ts","doc":"Get environment variable as number.","url":"./core/utils/mod.ts/~/envnum.html","category":"@chojs/core/utils","deprecated":false},{"id":"namespace_ChoWebApplication","kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ChoWebApplication","file":"web/mod.ts","doc":"","url":"./web/mod.ts/~/ChoWebApplication.html","deprecated":false},{"id":"namespace_ChoWebApplication","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ChoWebApplication.create","file":"web/mod.ts","doc":"Create and link a web application","url":"./web/mod.ts/~/ChoWebApplication.create.html","deprecated":false},{"id":"namespace_ChoWebLinker","kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ChoWebLinker","file":"web/mod.ts","doc":"Abstract Web Linker class Used as base class for linking a web application framework to Cho.js","url":"./web/mod.ts/~/ChoWebLinker.html","deprecated":false},{"id":"namespace_ChoWebLinker","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ChoWebLinker.prototype.ref","file":"web/mod.ts","doc":"Get a reference to the underlying application instance","url":"./web/mod.ts/~/ChoWebLinker.prototype.ref.html","deprecated":false},{"id":"namespace_ChoWebLinker","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ChoWebLinker.prototype.handler","file":"web/mod.ts","doc":"Get the application request handlers","url":"./web/mod.ts/~/ChoWebLinker.prototype.handler.html","deprecated":false},{"id":"namespace_ChoWebLinker","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ChoWebLinker.prototype.link","file":"web/mod.ts","doc":"Create the web application","url":"./web/mod.ts/~/ChoWebLinker.prototype.link.html","deprecated":false},{"id":"namespace_Controller","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Controller","file":"web/mod.ts","doc":"Marks a class as a web controller.","url":"./web/mod.ts/~/Controller.html","deprecated":false},{"id":"namespace_ControllerRef","kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ControllerRef","file":"web/mod.ts","doc":"A reference to a controller, including its descriptor, instance, middlewares, and methods.","url":"./web/mod.ts/~/ControllerRef.html","deprecated":false},{"id":"namespace_Controllers","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Controllers","file":"web/mod.ts","doc":"Register controller classes under a feature. Useful with the Feature decorator to declare which controllers belong to the feature.","url":"./web/mod.ts/~/Controllers.html","deprecated":false},{"id":"namespace_Delete","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Delete","file":"web/mod.ts","doc":"HTTP DELETE Method decorator","url":"./web/mod.ts/~/Delete.html","deprecated":false},{"id":"namespace_Feature","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Feature","file":"web/mod.ts","doc":"Marks a class as a web feature module.","url":"./web/mod.ts/~/Feature.html","deprecated":false},{"id":"namespace_FeatureRef","kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"FeatureRef","file":"web/mod.ts","doc":"A reference to a feature, including its descriptor, instance, middlewares, injector, sub-features, and controllers.","url":"./web/mod.ts/~/FeatureRef.html","deprecated":false},{"id":"namespace_Features","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Features","file":"web/mod.ts","doc":"Register sub-feature classes under a feature. Use to build nested feature trees with their own routes and middlewares.","url":"./web/mod.ts/~/Features.html","deprecated":false},{"id":"namespace_Get","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Get","file":"web/mod.ts","doc":"HTTP GET Method decorator","url":"./web/mod.ts/~/Get.html","deprecated":false},{"id":"namespace_Guards","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Guards","file":"web/mod.ts","doc":"Add one or more guards to a controller, feature, or method. Guards are similar to middlewares but are typically used for authorization checks.","url":"./web/mod.ts/~/Guards.html","deprecated":false},{"id":"namespace_MethodDecoratorFn","kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"MethodDecoratorFn","file":"web/mod.ts","doc":"","url":"./web/mod.ts/~/MethodDecoratorFn.html","deprecated":false},{"id":"namespace_MethodRef","kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"MethodRef","file":"web/mod.ts","doc":"A reference to a method, including its descriptor, handler function, and middlewares.","url":"./web/mod.ts/~/MethodRef.html","deprecated":false},{"id":"namespace_Middlewares","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Middlewares","file":"web/mod.ts","doc":"Add one or more middlewares to a controller, feature, or method. Middlewares can be classes or tokens that resolve to middleware handlers in your runtime.","url":"./web/mod.ts/~/Middlewares.html","deprecated":false},{"id":"namespace_Patch","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Patch","file":"web/mod.ts","doc":"HTTP PATCH Method decorator","url":"./web/mod.ts/~/Patch.html","deprecated":false},{"id":"namespace_Post","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Post","file":"web/mod.ts","doc":"HTTP POST Method decorator","url":"./web/mod.ts/~/Post.html","deprecated":false},{"id":"namespace_Put","kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"Put","file":"web/mod.ts","doc":"HTTP PUT Method decorator","url":"./web/mod.ts/~/Put.html","deprecated":false},{"id":"namespace_Route","kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"Route","file":"web/mod.ts","doc":"Create a descriptor that sets the route field on a controller, feature, or method. Works with both class-level decorators (Controller/Feature) and method decorators (Get/Post/etc.).","url":"./web/mod.ts/~/Route.html","deprecated":false}]};
})()