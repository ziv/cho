import{_ as t,c as e,o as s,ae as i}from"./chunks/framework.C3g5OKNe.js";const c=JSON.parse('{"title":"RFC: Decorator Based Web Application Framework","description":"","frontmatter":{},"headers":[],"relativePath":"rfcs/web.md","filePath":"rfcs/web.md"}'),n={name:"rfcs/web.md"};function r(l,a,o,h,d,p){return s(),e("div",null,[...a[0]||(a[0]=[i(`<h1 id="rfc-decorator-based-web-application-framework" tabindex="-1">RFC: Decorator Based Web Application Framework <a class="header-anchor" href="#rfc-decorator-based-web-application-framework" aria-label="Permalink to &quot;RFC: Decorator Based Web Application Framework&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#summary">Summary</a></li><li><a href="#building-blocks">Building Blocks</a><ul><li><a href="#injectable-entity">Injectable Entity</a></li><li><a href="#routable-entity">Routable Entity</a></li><li><a href="#endpoint">Endpoint</a></li><li><a href="#controller">Controller</a></li><li><a href="#feature">Feature</a></li></ul></li><li><a href="#implementation-details">Implementation Details</a><ul><li><a href="#input-decorators">Input Decorators</a></li><li><a href="#middlewares-decorator">Middlewares Decorator</a></li><li><a href="#controller-decorator">Controller Decorator</a></li><li><a href="#feature-decorator">Feature Decorator</a></li></ul></li></ul></nav><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>This RFC proposes a decorator-based web application framework that allows developers to define controllers, endpoints, and features using decorators. The framework will support dependency injection, routing, and middleware.</p><h2 id="building-blocks" tabindex="-1">Building Blocks <a class="header-anchor" href="#building-blocks" aria-label="Permalink to &quot;Building Blocks&quot;">​</a></h2><h3 id="injectable-entity" tabindex="-1">Injectable Entity <a class="header-anchor" href="#injectable-entity" aria-label="Permalink to &quot;Injectable Entity&quot;">​</a></h3><p>An injectable entity is a class that can have dependencies injected into its constructor. For more details, see the <a href="./di.html">Dependency Injection RFC</a>.</p><h3 id="routable-entity" tabindex="-1">Routable Entity <a class="header-anchor" href="#routable-entity" aria-label="Permalink to &quot;Routable Entity&quot;">​</a></h3><p>Any entity that can be routed to, such as an endpoint, a controller or a feature. Routable entity can be associated with an optional route path and middlewares.</p><h3 id="endpoint" tabindex="-1">Endpoint <a class="header-anchor" href="#endpoint" aria-label="Permalink to &quot;Endpoint&quot;">​</a></h3><p>An endpoint is a <strong>routable</strong> method within a controller that handles a specific HTTP request (e.g., GET, POST).</p><p>Endpoints are asynchronous methods, resolving a plain value, a response object, or throwing an error:</p><table tabindex="0"><thead><tr><th>Return Type</th><th>Behavior</th></tr></thead><tbody><tr><td>Plain value</td><td>Serialize to JSON and send as response body with 200 status code code unless otherwise specified.</td></tr><tr><td>Response object</td><td>Used as the response.</td></tr><tr><td>Error thrown</td><td>Propagate to the error handler.</td></tr></tbody></table><h3 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">​</a></h3><p>A controller is a <strong>routable</strong> class that exposes a set of routes (endpoints). The controller is an <strong>injectable</strong> class that can have dependencies injected into its constructor.</p><h3 id="feature" tabindex="-1">Feature <a class="header-anchor" href="#feature" aria-label="Permalink to &quot;Feature&quot;">​</a></h3><p>A feature is a <strong>routable</strong> module that exposes a set of controllers and/or sub-features. The feature is an <strong>injectable</strong> class that can have dependencies injected into its constructor.</p><h2 id="implementation-details" tabindex="-1">Implementation Details <a class="header-anchor" href="#implementation-details" aria-label="Permalink to &quot;Implementation Details&quot;">​</a></h2><p>Decorators will be used to define controllers, endpoints, and features. The decorators will be processed at runtime to set up the routing and middleware.</p><h3 id="input-decorators" tabindex="-1">Input Decorators <a class="header-anchor" href="#input-decorators" aria-label="Permalink to &quot;Input Decorators&quot;">​</a></h3><p>Since we are dealing with JS decorators, we cannot set decorators on method arguments directly. Instead, we will use extra arguments in the input decorator to define list of inputs we want to add our endpoint.</p><p>Definition:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">route</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodArgType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="context-argument" tabindex="-1">Context Argument <a class="header-anchor" href="#context-argument" aria-label="Permalink to &quot;Context Argument&quot;">​</a></h4><p>The context is always passes to the method, and it is always the last argument of the method. By default, if no extra arguments provided, the method will receive only the context object as its argument.</p><h4 id="input-arguments" tabindex="-1">Input Arguments <a class="header-anchor" href="#input-arguments" aria-label="Permalink to &quot;Input Arguments&quot;">​</a></h4><p>We can use any of the following input arguments function to extract specific parts of the request and validate them if a validator is provided.</p><table tabindex="0"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Param(name?, validator?)</code></td><td>Extracts a path parameter(s) from the request URL</td></tr><tr><td><code>Query(name?, validator?)</code></td><td>Extracts a query parameter from the request URL</td></tr><tr><td><code>Body(name?, validator?)</code></td><td>Extracts path from request body</td></tr><tr><td><code>Header(name?, validator?)</code></td><td>Extracts a header from the request</td></tr><tr><td><code>Cookie(name, validator?)</code></td><td>Extracts a cookie from the request</td></tr><tr><td><code>Context</code></td><td>The context object</td></tr><tr><td><code>RawRequest</code></td><td>The raw request object</td></tr><tr><td><code>RawResponse</code></td><td>The raw response object</td></tr></tbody></table><p>The validator should be an object with a <code>safeParse</code> method that takes the input and returns an object with the following properties:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Validator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    safeParse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        success</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>Libraries support this interface include Zod, Yup, Joi, Valibot, and many others.</p><h4 id="http-methods-decorators" tabindex="-1">HTTP Methods Decorators <a class="header-anchor" href="#http-methods-decorators" aria-label="Permalink to &quot;HTTP Methods Decorators&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>@Get</code></td><td>Defines a GET endpoint</td></tr><tr><td><code>@Post</code></td><td>Defines a POST endpoint</td></tr><tr><td><code>@Put</code></td><td>Defines a PUT endpoint</td></tr><tr><td><code>@Patch</code></td><td>Defines a PATCH endpoint</td></tr><tr><td><code>@Delete</code></td><td>Defines a DELETE endpoint</td></tr></tbody></table><p>Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExampleController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;route&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(validator),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-api-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;session_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> validator,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        sessionsId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChoContext</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // the context is always the last argument</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="other-input-decorators" tabindex="-1">Other Input Decorators <a class="header-anchor" href="#other-input-decorators" aria-label="Permalink to &quot;Other Input Decorators&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Decorator</th><th>Description</th></tr></thead><tbody><tr><td><code>@Sse</code></td><td>Server-Sent Events endpoint</td></tr><tr><td><code>@WebSocket</code></td><td>WebSocket endpoint</td></tr><tr><td><code>@Stream</code></td><td>Stream endpoint</td></tr></tbody></table><p>Each of these decorators explained in its own RFC document as extensions to this base framework.</p><h3 id="middlewares-decorator" tabindex="-1">Middlewares Decorator <a class="header-anchor" href="#middlewares-decorator" aria-label="Permalink to &quot;Middlewares Decorator&quot;">​</a></h3><p>Takes a list of middlewares to be applied to the feature, controller or endpoint. Middlewares are executed in the order they are defined. Middleware can be either a function or an injectable class that implements the <code>ChoMiddleware</code> interface.</p><p>Definition:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Middlewares</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">middlewares</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChoMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="controller-decorator" tabindex="-1">Controller Decorator <a class="header-anchor" href="#controller-decorator" aria-label="Permalink to &quot;Controller Decorator&quot;">​</a></h3><h3 id="feature-decorator" tabindex="-1">Feature Decorator <a class="header-anchor" href="#feature-decorator" aria-label="Permalink to &quot;Feature Decorator&quot;">​</a></h3>`,44)])])}const u=t(n,[["render",r]]);export{c as __pageData,u as default};
