import{_ as s,c as i,o as e,ae as n}from"./chunks/framework.C3g5OKNe.js";const m=JSON.parse('{"title":"Specifications: Decorator Based CLI Application Framework","description":"","frontmatter":{},"headers":[],"relativePath":"rfcs/command.md","filePath":"rfcs/command.md"}'),t={name:"rfcs/command.md"};function l(o,a,r,p,h,d){return e(),i("div",null,[...a[0]||(a[0]=[n(`<h1 id="specifications-decorator-based-cli-application-framework" tabindex="-1">Specifications: Decorator Based CLI Application Framework <a class="header-anchor" href="#specifications-decorator-based-cli-application-framework" aria-label="Permalink to &quot;Specifications: Decorator Based CLI Application Framework&quot;">​</a></h1><table class="properties"><tbody><tr><th>Status</th><td>in progress</td></tr><tr><th>Created</th><td>2025-08-21</td></tr><tr><th>Target</th><td>TypeScript (ECMAScript decorators)</td></tr></tbody></table><nav class="table-of-contents"><ul><li><a href="#summary">Summary</a></li><li><a href="#building-blocks">Building Blocks</a><ul><li><a href="#injectable-entity">Injectable Entity</a></li><li><a href="#command">Command</a></li><li><a href="#controller">Controller</a></li><li><a href="#module">Module</a></li></ul></li><li><a href="#implementation-details">Implementation Details</a><ul><li><a href="#endpoint-command-method">Endpoint/Command Method</a></li><li><a href="#main-decorator">@Main() decorator</a></li><li><a href="#command-decorator">@Command() decorator</a></li><li><a href="#the-controller">The Controller</a></li><li><a href="#the-application-module">The Application Module</a></li><li><a href="#application-limitations">Application Limitations</a></li><li><a href="#routing">Routing</a></li><li><a href="#middlewares">Middlewares</a></li></ul></li></ul></nav><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>This document proposes a decorator-based command line application framework that allows developers to define controllers and commands using decorators. The framework will support dependency injection, routing, and middlewares.</p><h2 id="building-blocks" tabindex="-1">Building Blocks <a class="header-anchor" href="#building-blocks" aria-label="Permalink to &quot;Building Blocks&quot;">​</a></h2><h3 id="injectable-entity" tabindex="-1">Injectable Entity <a class="header-anchor" href="#injectable-entity" aria-label="Permalink to &quot;Injectable Entity&quot;">​</a></h3><p>An injectable entity is a class that can have dependencies injected into its constructor. For more details, see the <a href="./di.html">Dependency Injection RFC</a>.</p><h3 id="command" tabindex="-1">Command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;Command&quot;">​</a></h3><p>A command is an endpoint, method withing a controller that can be executed from the command line. Commands can have arguments and options from the CLI.</p><h3 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">​</a></h3><p>A controller is a class annotated with <code>@Controller</code> decorator. The controller an <strong>injectable</strong> class that can have dependencies injected into its constructor.</p><p>Controller can have a single entry (main command endpoint) or multiple entries (sub-commands), but not both.</p><h3 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;Module&quot;">​</a></h3><p>A module is a class annotated with <code>@Module</code> decorator. The module is the DI context for its controllers. The module is an <strong>injectable</strong> class that can have dependencies injected into its constructor and can register providers or import other modules.</p><hr><h2 id="implementation-details" tabindex="-1">Implementation Details <a class="header-anchor" href="#implementation-details" aria-label="Permalink to &quot;Implementation Details&quot;">​</a></h2><p>Decorators will be used to define endpoints, controllers and modules. The decorators will be processed at runtime to set up middleware and error handling.</p><h3 id="endpoint-command-method" tabindex="-1">Endpoint/Command Method <a class="header-anchor" href="#endpoint-command-method" aria-label="Permalink to &quot;Endpoint/Command Method&quot;">​</a></h3><p>The method get a <code>ChoCommandContext</code> parameter that contains the command line arguments and options (minimist API). The return value of the command is the application exit code, where <code>void</code> is treated as <code>0</code>.</p><h3 id="main-decorator" tabindex="-1"><code>@Main()</code> decorator <a class="header-anchor" href="#main-decorator" aria-label="Permalink to &quot;\`@Main()\` decorator&quot;">​</a></h3><p>The <code>@Main()</code> decorator is used to define the main command of a controller. The main command is the only endpoint of the controller.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mainCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="command-decorator" tabindex="-1"><code>@Command()</code> decorator <a class="header-anchor" href="#command-decorator" aria-label="Permalink to &quot;\`@Command()\` decorator&quot;">​</a></h3><p>The <code>@Command()</code> decorator is used to define a multi-command of a controller. The sub-command is executed when the controller is invoked with the sub-command name.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;farewell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    farewell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Goodbye, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="the-controller" tabindex="-1">The Controller <a class="header-anchor" href="#the-controller" aria-label="Permalink to &quot;The Controller&quot;">​</a></h3><p>A controller is a class annotated with the <code>@Controller</code> decorator. The controller is an injectable class that can have dependencies injected into its constructor.</p><p>The controller implement the endpoints of the application. Each endpoint is a method within the controller that is decorated with either the <code>@Main()</code> or <code>@Command()</code> decorator.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="the-application-module" tabindex="-1">The Application Module <a class="header-anchor" href="#the-application-module" aria-label="Permalink to &quot;The Application Module&quot;">​</a></h3><p>The application module is the root module of the application. It is a class annotated with the <code>@Module</code> decorator. The application module is an injectable class that can have dependencies injected into its constructor and can register providers or import other modules.</p><p>The application module is the dependency injection context of its controllers.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    imports: [SomeModule],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    controllers: [MyController, AnotherController], </span><span><span class="ths-floater ths-up" style="transform:translate(-250px, 30px);">single controller in case of main</span></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="application-limitations" tabindex="-1">Application Limitations <a class="header-anchor" href="#application-limitations" aria-label="Permalink to &quot;Application Limitations&quot;">​</a></h3><p>Application can have either a main command or multiple sub-commands, but not both:</p><ul><li>The program <code>ls</code> is an example of a controller with a main command.</li><li>The program <code>git</code> is an example of a controller with multiple sub-commands.</li></ul><h3 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h3><p>The routing is based on the command name. If the application implemented the main command, the command is executed when the application is invoked with any arguments.</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># call the main command</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arg1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arg2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --flag</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If the application implemented multiple sub-commands, the application is invoked with the sub-command name as the first argument.</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># call the arg1 command</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arg1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arg2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --flag</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="middlewares" tabindex="-1">Middlewares <a class="header-anchor" href="#middlewares" aria-label="Permalink to &quot;Middlewares&quot;">​</a></h3><p>See middlewares in the [Application Lifecycle RFC./lifecycle.md).</p><p>The middlewares are functions that are executed before and after the command is executed. The signature of a middleware is:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Middleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChoCommandContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The <code>context</code> parameter is the command context, which contains the command line arguments and options. The <code>next</code> parameter is a function that executes the next middleware in the chain.</p><p>Middlewares can be applied globally to all commands (module or controller) or to specific commands (method).</p><p>For middlewares require dependencies, implement the <code>ChoMiddleware</code> interface:</p>`,49)])])}const k=s(t,[["render",l]]);export{m as __pageData,k as default};
